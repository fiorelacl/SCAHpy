[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "Getting Started"
  },
  {
    "objectID": "index.html#what-is-scahpy",
    "href": "index.html#what-is-scahpy",
    "title": "Getting Started",
    "section": "What is SCAHpy?",
    "text": "What is SCAHpy?\nSCAHpy is an open-source Python package that facilitate the analysis and visualization of the ouputs from atmospheric, oceaninc and hydrological component from the Geophysical Institute of Peru Regional Earth System Model Croco-Oasis-WRF (IGP-RESM-COW)"
  },
  {
    "objectID": "index.html#why-is-scahpy",
    "href": "index.html#why-is-scahpy",
    "title": "Getting Started",
    "section": "Why is SCAHpy?",
    "text": "Why is SCAHpy?\nAtmospheric component of the coupled model generate a large volumes of output data, making the analysis of model data harder. SCAHpy facilitates the manage of this volumes of data, also enables a manage of coordinates and times to local times."
  },
  {
    "objectID": "index.html#how-to-use-scahpy",
    "href": "index.html#how-to-use-scahpy",
    "title": "Getting Started",
    "section": "How to use SCAHpy?",
    "text": "How to use SCAHpy?\nSCAHpy can be used as a standalone package or it can also be run on the HPC-IGP-Cluster, which has the diagnostic simulations of 22 years of runnings centered on Peru Region.\n\n\n\n\n\n\nNote\n\n\n\nSCAHpy has been developed and tested using IGP-RESM-COW model outputs. However, it is designed to work with any WRF outputs. We are open to contributions from users!\n\n\n\nGetting Started\n\nInstallation\nUsage\n\n\n\nTutorial & Use Cases\n\nTutorial: Reading Single Files\nTutorial: Reading Multiple Files\nTutorial: Pressure Levels Variables\n\n\n\nHelp & Reference\n\nAPI References\nContributing"
  },
  {
    "objectID": "01_install.html#required-dependencies",
    "href": "01_install.html#required-dependencies",
    "title": "Installation",
    "section": "Required dependencies:",
    "text": "Required dependencies:\n\nPython &gt;= 3.9\nxarray\nwrf-python\nmetpy"
  },
  {
    "objectID": "01_install.html#optional-dependencies",
    "href": "01_install.html#optional-dependencies",
    "title": "Installation",
    "section": "Optional dependencies:",
    "text": "Optional dependencies:\nFor optimal performance, it is highly recommended that you install the following dependencies:\n\nbottleneck\nCartopy\nDask.distributed\nIPython\nnetCDF4\nxESMF\nxskillscore\ngeopandas"
  },
  {
    "objectID": "01_install.html#step-by-step-instructions",
    "href": "01_install.html#step-by-step-instructions",
    "title": "Installation",
    "section": "Step-by-step instructions",
    "text": "Step-by-step instructions\n\nUsing Mamba\n\nFirst, download and install mamba or miniconda through Miniforge .\nThe easiest way to install SCAHpy and the above mentioned dependencies is to use the environment.yml from the repository. Open a terminal, then run the following command:\n\n mamba env create --file environment.yml -n scahpy_env\n\n\nUsing pip\n\nTo install SCAHpy directly. Open a terminal, then run the following command:\n\n pip install scahpy\nThen, activate the environment:\n$ mamba activate scahpy_env"
  },
  {
    "objectID": "02_use.html",
    "href": "02_use.html",
    "title": "Usage",
    "section": "",
    "text": "Example Usage of scahpy Package"
  },
  {
    "objectID": "02_use.html#importing-the-package",
    "href": "02_use.html#importing-the-package",
    "title": "Usage",
    "section": "Importing the Package",
    "text": "Importing the Package\nfrom scahpy import in_out, met_diag\nimport glob"
  },
  {
    "objectID": "02_use.html#reading-multiple-wrf-outs",
    "href": "02_use.html#reading-multiple-wrf-outs",
    "title": "Usage",
    "section": "Reading Multiple WRF outs",
    "text": "Reading Multiple WRF outs\n# Example: Reading and processing multiple WRF datasets\nsfc = in_out._drop_wrf_vars('/datos/wrfout_d01_2024-01-01_03:00:00',['RAINC', 'RAINNC', 'RAINSH', 'U10', 'V10', 'SSTSK'])\nfiles = sorted(glob.glob('/datos/wrfout_d01*'))\nds = in_out.ds_wrf_multi(files, sfc, '5 hours', -1)"
  },
  {
    "objectID": "02_use.html#calculating-precipitation",
    "href": "02_use.html#calculating-precipitation",
    "title": "Usage",
    "section": "Calculating Precipitation",
    "text": "Calculating Precipitation\n# Example: Calculating precipitation using diagnostics module\nds2 = met_diag.calc_pp(ds, True)"
  },
  {
    "objectID": "03_tutorial_01.html#step-1-reading-wrf-data",
    "href": "03_tutorial_01.html#step-1-reading-wrf-data",
    "title": "Reading a Single File",
    "section": "Step 1: Reading WRF Data",
    "text": "Step 1: Reading WRF Data\nFirst, we need to read the WRF data using the in_out module in the scahpy package. We’ll drop unnecessary variables and select a single WRF dataset.\nfrom scahpy import *\nimport glob\n\nfile_name = '/data/datos/COW/OUT_DIAG_WRF/wrfouts/wrfout_d01_2023-03-10_03:00:00'\nvars = in_out._drop_wrf_vars(file_name,['RAINC', 'RAINNC', 'RAINSH', 'U10', 'V10', 'SSTSK'])\nds = in_out.ds_wrf_single(file_name, vars, '5 hours', -1)"
  },
  {
    "objectID": "03_tutorial_01.html#step-2-calculating-precipitation-and-wind-speed",
    "href": "03_tutorial_01.html#step-2-calculating-precipitation-and-wind-speed",
    "title": "Reading a Single File",
    "section": "Step 2: Calculating Precipitation and Wind Speed",
    "text": "Step 2: Calculating Precipitation and Wind Speed\nNow, let’s calculate precipitation using the met_diag module.\nds_sfc = met_diag.calc_pp(ds,elim=True)\nds_sfc = met_diag.calc_wsp(ds_sfc,elim=False)\nds_sfc = met_diag.calc_celsius(ds_sfc,'SSTSK')"
  },
  {
    "objectID": "03_tutorial_01.html#step-3-plotting-precipitation-maps",
    "href": "03_tutorial_01.html#step-3-plotting-precipitation-maps",
    "title": "Reading a Single File",
    "section": "Step 3: Plotting Precipitation Maps",
    "text": "Step 3: Plotting Precipitation Maps\nNow, let’s create precipitation maps for selected months using the map_pp_uv10_sst function.\n# Example usage\nlevs = [1,2,3,5,7,11,15,20,25,30,35,40,45,50,55,60]\nlevs2 = [26, 27, 28]\n\nmap_pp_uv10_sst(ds_sfc['PP'], ds_sfc, levs, levs2, shapefile=None, \n                          output_path='.', freq = 'H',\n                          save_maps=True, quiverkey_speed=10, extent=None)\nThis tutorial guides you through the steps of reading WRF data, calculating precipitation, performing temporal aggregation, and creating precipitation maps using the scahpy package."
  },
  {
    "objectID": "03_tutorial_02.html#step-1-reading-wrf-data",
    "href": "03_tutorial_02.html#step-1-reading-wrf-data",
    "title": "Reading Multiple File",
    "section": "Step 1: Reading WRF Data",
    "text": "Step 1: Reading WRF Data\nFirst, we need to read the WRF data using the in_out module in the scahpy package. We’ll drop unnecessary variables and select a single WRF dataset.\nfrom scahpy import *\nimport glob\n\nsfc = in_out._drop_wrf_vars('/data/datos/COW/OUT_DIAG_WRF/wrfouts/wrfout_d01_2023-03-10_03:00:00',['RAINC', 'RAINNC', 'RAINSH', 'U10', 'V10', 'SSTSK'])\nfiles = sorted(glob.glob('/data/datos/COW/OUT_DIAG_WRF/wrfouts/wrfout_d01_2023-03-1*'))\nds = in_out.ds_wrf_multi(files, sfc, '5 hours', -1)"
  },
  {
    "objectID": "03_tutorial_02.html#step-2-calculating-precipitation-and-wind-speed",
    "href": "03_tutorial_02.html#step-2-calculating-precipitation-and-wind-speed",
    "title": "Reading Multiple File",
    "section": "Step 2: Calculating Precipitation and Wind Speed",
    "text": "Step 2: Calculating Precipitation and Wind Speed\nNow, let’s calculate precipitation using the met_diag module.\nds_sfc = met_diag.calc_pp(ds,elim=True)\nds_sfc = met_diag.calc_wsp(ds_sfc,elim=False)\nds_sfc = met_diag.calc_celsius(ds_sfc,'SSTSK')"
  },
  {
    "objectID": "03_tutorial_02.html#step-3-agregating-the-data",
    "href": "03_tutorial_02.html#step-3-agregating-the-data",
    "title": "Reading Multiple File",
    "section": "Step 3: Agregating the data",
    "text": "Step 3: Agregating the data\ndd = temp_scales.dmy_var(ds_sfc_, tiempo='1D', accum=['PP'], avg=['U10', 'V10'], mediana=['SSTSK'])"
  },
  {
    "objectID": "03_tutorial_02.html#step-4-plotting-precipitation-maps",
    "href": "03_tutorial_02.html#step-4-plotting-precipitation-maps",
    "title": "Reading Multiple File",
    "section": "Step 4: Plotting Precipitation Maps",
    "text": "Step 4: Plotting Precipitation Maps\nNow, let’s create precipitation maps for selected times using the map_pp_uv10_sst function.\n# Example usage\nlevs = [1,2,3,5,7,11,15,20,25,30,35,40,45,50,55,60]\nlevs2 = [26, 27, 28]\n\nmap_pp_uv10_sst(ds_sfc['PP'], ds_sfc, levs, levs2, shapefile=None, \n                          output_path='.', freq = 'D',\n                          save_maps=True, quiverkey_speed=10, extent=None)\nThis tutorial guides you through the steps of reading WRF data, calculating precipitation, performing temporal aggregation, and creating precipitation maps using the scahpy package."
  },
  {
    "objectID": "03_tutorial_03.html#step-1-reading-wrf-data",
    "href": "03_tutorial_03.html#step-1-reading-wrf-data",
    "title": "Pressure levels variables",
    "section": "Step 1: Reading WRF Data",
    "text": "Step 1: Reading WRF Data\nFirst, we need to read the WRF data using the in_out module in the scahpy package. We’ll drop unnecessary variables and select a single WRF dataset.\nfrom scahpy import *\nimport glob\n\nsfc = in_out._drop_wrf_vars('/data/datos/COW/OUT_DIAG_WRF/wrfouts/wrfout_d01_2023-03-10_03:00:00',['U', 'W', 'P', 'PB', 'QVAPOR'])\nfiles = sorted(glob.glob('/data/datos/COW/OUT_DIAG_WRF/wrfouts/wrfout_d01_2023-03-1*'))\nds = in_out.ds_wrf_multi(files, sfc, '5 hours', -1)"
  },
  {
    "objectID": "03_tutorial_03.html#step-2-calculating-precipitation-and-wind-speed",
    "href": "03_tutorial_03.html#step-2-calculating-precipitation-and-wind-speed",
    "title": "Pressure levels variables",
    "section": "Step 2: Calculating Precipitation and Wind Speed",
    "text": "Step 2: Calculating Precipitation and Wind Speed\nNow, let’s calculate precipitation using the met_diag module.\nds_vert = met_diag.calc_qe(ds, elim=True)\nds_vert = met_diag.calc_pres(ds_vert, elim=True)"
  },
  {
    "objectID": "03_tutorial_03.html#step-3-agregating-the-data",
    "href": "03_tutorial_03.html#step-3-agregating-the-data",
    "title": "Pressure levels variables",
    "section": "Step 3: Agregating the data",
    "text": "Step 3: Agregating the data\ndd = temp_scales.dmy_var(ds_vert, tiempo='1D', avg=['Presion','U','W','QE'])"
  },
  {
    "objectID": "03_tutorial_03.html#step-4-plotting",
    "href": "03_tutorial_03.html#step-4-plotting",
    "title": "Pressure levels variables",
    "section": "Step 4: Plotting",
    "text": "Step 4: Plotting\nNow, let’s create precipitation maps for selected months using the cross_section_yz function.\n# Example usage\nThis tutorial guides you through the steps of reading WRF data, calculating precipitation, performing temporal aggregation, and creating precipitation maps using the scahpy package."
  },
  {
    "objectID": "04_API.html#in_out.ds_wrf_multi",
    "href": "04_API.html#in_out.ds_wrf_multi",
    "title": "API reference",
    "section": "in_out.ds_wrf_multi",
    "text": "in_out.ds_wrf_multi\nin_out.ds_wrf_multi(files,list_no_vars,difHor=0,sign=1)\nRead a list of wrfout files for the variables selected.\n\nParameters:\n\nfiles : List of wrfout files\nlist_no_vars : List of variables to be delated\ndifHor : String with the hours t\nsign: -1 or 1 according to the difference\n\n\n\nReturns\n\nfig (matplotlib.figure.Figure)\nax (matplotlib.axes.Axes)"
  },
  {
    "objectID": "04_API.html#in_out.ds_wrf_single",
    "href": "04_API.html#in_out.ds_wrf_single",
    "title": "API reference",
    "section": "in_out.ds_wrf_single",
    "text": "in_out.ds_wrf_single\nin_out.ds_wrf_single(file,list_no_vars,difHor=0,sign=1)\nRead a list of wrfout files for the variables selected.\n\nParameters:\n\nfile : List of wrfout files\nlist_no_vars : List of variables to be delated\ndifHor : String with the hours t\nsign: -1 or 1 according to the difference\n\n\n\nReturns\n\nfig (matplotlib.figure.Figure)\nax (matplotlib.axes.Axes)"
  },
  {
    "objectID": "04_API.html#in_out.extract_station_wrf",
    "href": "04_API.html#in_out.extract_station_wrf",
    "title": "API reference",
    "section": "in_out.extract_station_wrf",
    "text": "in_out.extract_station_wrf\nin_out.extract_station_wrf(out,station,lon_col, lat_col, name_col, output_format='netcdf')\nExtracts data from a WRF output file using station coordinates provided in a CSV or shapefile.\n\nParameters:\n\nout (nc): the wrf outfile already laoded.\nstation (str): Path to the CSV or shapefile containing station coordinates.\nlon_col (str): Name of the column containing longitude values.\nlat_col (str): Name of the column containing latitude values.\nname_col (str): Name of the column containing station names.\noutput_format (str, optional): Output format (‘netcdf’ or ‘dataframe’). Defaults to ‘netcdf’.\n\n\n\nReturns\n\nfig (matplotlib.figure.Figure)\nax (matplotlib.axes.Axes)"
  },
  {
    "objectID": "04_API.html#met_diag.calc_pp",
    "href": "04_API.html#met_diag.calc_pp",
    "title": "API reference",
    "section": "met_diag.calc_pp",
    "text": "met_diag.calc_pp\nmet_diag.calc_pp(ds, elim=False)\nde-acumulate the rainfall and save it as PP.\n\nParameters:\n\nds (nc): dataset with the variables RAINC, RAINNC and RAINSH already loaded.\nelim (bool): False (default) keep the old and new variables, True keep only the new variable.\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#met_diag.calc_wsp",
    "href": "04_API.html#met_diag.calc_wsp",
    "title": "API reference",
    "section": "met_diag.calc_wsp",
    "text": "met_diag.calc_wsp\nmet_diag.calc_wsp(ds, elim=False)\ncalculate the wind speed.\n\nParameters:\n\nds (nc): dataset with the variables U10 and V10 already loaded with coordinates already processed.\nelim (bool): False (default) keep the old and new variables, True keep only the new variable.\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#met_diag.calc_pres",
    "href": "04_API.html#met_diag.calc_pres",
    "title": "API reference",
    "section": "met_diag.calc_pres",
    "text": "met_diag.calc_pres\nmet_diag.calc_pres(ds, elim=False)\ncalculate the total atmospheric pressure and save it as Presion.\n\nParameters:\n\nds (nc): dataset with the variables P, PB already loaded with coordinates already processed.\nelim (bool): False (default) keep the old and new variables, True keep only the new variable.\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#met_diag.calc_tp",
    "href": "04_API.html#met_diag.calc_tp",
    "title": "API reference",
    "section": "met_diag.calc_tp",
    "text": "met_diag.calc_tp\nmet_diag.calc_tp(ds, elim=False)\ncalculate the potential temperature and save it as TPo.\n\nParameters:\n\nds (nc): dataset with the variable T already loaded with coordinates already processed.\nelim (bool): False (default) keep the old and new variables, True keep only the new variable.\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#met_diag.calc_qe",
    "href": "04_API.html#met_diag.calc_qe",
    "title": "API reference",
    "section": "met_diag.calc_qe",
    "text": "met_diag.calc_qe\nmet_diag.calc_qe(ds, elim=False)\ncalculate the specific humidity and save it as QE.\n\nParameters:\n\nds (nc): dataset with the variable QVAPOR already loaded with coordinates already processed.\nelim (bool): False (default) keep the old and new variables, True keep only the new variable.\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#spatial_scales.vert_levs",
    "href": "04_API.html#spatial_scales.vert_levs",
    "title": "API reference",
    "section": "spatial_scales.vert_levs",
    "text": "spatial_scales.vert_levs\nspatial_scales.vert_levs(ds,varis,lvls=None):\nInterpolate vertical levels to a pressure variable\n\nParameters:\n\nds (nc): dataset already loaded.\nvaris (list): list of vertical variables to interpolate.\nlvls (list): list of levels to be interpolated, if none provided, it will use [1000,975,950,925,900,850,800,700,600,500,400,300,200] as default.\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#temp_scales.dmy_var",
    "href": "04_API.html#temp_scales.dmy_var",
    "title": "API reference",
    "section": "temp_scales.dmy_var",
    "text": "temp_scales.dmy_var\ntemp_scales.dmy_var(ds,tiempo=None ,accum=None, avg=None, mediana=None):\nConvert hourly (default wrf out) time to any acceptable by resample function.\n\nParameters:\n\nds : Dataset loaded\ntiempo : Time accepted by resample\naccum : List of variables who need sum\navg : if True use the mean function\nmediana : if True use the median function\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#temp_scales.monthly_clim",
    "href": "04_API.html#temp_scales.monthly_clim",
    "title": "API reference",
    "section": "temp_scales.monthly_clim",
    "text": "temp_scales.monthly_clim\ntemp_scales.monthly_clim(ds, stat=None, time_slice=None):\nConvert a Dataset to monthly climatology.\n\nParameters:\n\nds : Dataset loaded\nstat : Mean or median\ntime_slice : use the slice(ini,fin)\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "04_API.html#temp_scales.daily_clim",
    "href": "04_API.html#temp_scales.daily_clim",
    "title": "API reference",
    "section": "temp_scales.daily_clim",
    "text": "temp_scales.daily_clim\ntemp_scales.daily_clim(ds, var):\nGenerate daily climatology using moving window (mw) each 15 days.\n\nParameters:\n\nds : Dataset loaded\nvar : str with the variable’s name\n\n\n\nReturns\n\nnetcdf xarray.Dataset"
  },
  {
    "objectID": "05_contrib.html",
    "href": "05_contrib.html",
    "title": "Contributing",
    "section": "",
    "text": "All types of crontributions, bugs, feedbacks are welcome!\nReport bugs and submit feedback at Github Issues."
  }
]